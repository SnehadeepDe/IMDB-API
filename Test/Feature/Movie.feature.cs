// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.8.0.0
//      SpecFlow Generator Version:3.8.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace IMDB_API.test.Feature
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.8.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class MovieResourceFeature : object, Xunit.IClassFixture<MovieResourceFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Movie.feature"
#line hidden
        
        public MovieResourceFeature(MovieResourceFeature.FixtureData fixtureData, IMDB_API_test_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Feature", "Movie Resource", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get All Movies")]
        [Xunit.TraitAttribute("FeatureTitle", "Movie Resource")]
        [Xunit.TraitAttribute("Description", "Get All Movies")]
        public virtual void GetAllMovies()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get All Movies", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
    testRunner.When("I make GET Request \'/movies\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 6
    testRunner.Then("response code must be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 7
    testRunner.And(@"response data must look like '[{""id"":1,""name"":""Movie 1"",""yearOfRelease"":2000,""plot"":""Plot 1"",""coverImage"":""image1.jpg"",""producer"":{""id"":1,""name"":""Producer 1"",""bio"":""Bio 1"",""dob"":""2000-05-05T00:00:00"",""gender"":""Male""},""actors"":[{""id"":1,""name"":""Actor 1"",""bio"":""Bio 1"",""dob"":""2000-05-05T00:00:00"",""gender"":""Male""},{""id"":2,""name"":""Actor 2"",""bio"":""Bio 2"",""dob"":""2000-05-05T00:00:00"",""gender"":""Female""}],""genres"":[{""id"":1,""name"":""Genre 1""},{""id"":2,""name"":""Genre 2""}],""reviews"":[{""id"":1,""message"":""Review 1"",""movieId"":1}]},{""id"":2,""name"":""Movie 2"",""yearOfRelease"":2000,""plot"":""Plot 2"",""coverImage"":""image2.jpg"",""producer"":{""id"":2,""name"":""Producer 2"",""bio"":""Bio 2"",""dob"":""2000-05-05T00:00:00"",""gender"":""Female""},""actors"":[{""id"":2,""name"":""Actor 2"",""bio"":""Bio 2"",""dob"":""2000-05-05T00:00:00"",""gender"":""Female""}],""genres"":[{""id"":2,""name"":""Genre 2""}],""reviews"":[{""id"":2,""message"":""Review 2"",""movieId"":2}]}]'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get Movie by ID")]
        [Xunit.TraitAttribute("FeatureTitle", "Movie Resource")]
        [Xunit.TraitAttribute("Description", "Get Movie by ID")]
        [Xunit.InlineDataAttribute("1", "200", @"{""id"":1,""name"":""Movie 1"",""yearOfRelease"":2000,""plot"":""Plot 1"",""coverImage"":""image1.jpg"",""producer"":{""id"":1,""name"":""Producer 1"",""bio"":""Bio 1"",""dob"":""2000-05-05T00:00:00"",""gender"":""Male""},""actors"":[{""id"":1,""name"":""Actor 1"",""bio"":""Bio 1"",""dob"":""2000-05-05T00:00:00"",""gender"":""Male""},{""id"":2,""name"":""Actor 2"",""bio"":""Bio 2"",""dob"":""2000-05-05T00:00:00"",""gender"":""Female""}],""genres"":[{""id"":1,""name"":""Genre 1""},{""id"":2,""name"":""Genre 2""}],""reviews"":[{""id"":1,""message"":""Review 1"",""movieId"":1}]}", new string[0])]
        [Xunit.InlineDataAttribute("999", "404", "{\"message\":\"Movie not found\"}", new string[0])]
        public virtual void GetMovieByID(string movieId, string statusCode, string expectedResponse, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("movieId", movieId);
            argumentsOfScenario.Add("statusCode", statusCode);
            argumentsOfScenario.Add("expectedResponse", expectedResponse);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Movie by ID", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
    testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 11
    testRunner.When(string.Format("I make GET Request \'/movies/{0}\'", movieId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
    testRunner.Then(string.Format("response code must be \'{0}\'", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 13
    testRunner.And(string.Format("response data must look like \'{0}\'", expectedResponse), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Create Movie")]
        [Xunit.TraitAttribute("FeatureTitle", "Movie Resource")]
        [Xunit.TraitAttribute("Description", "Create Movie")]
        [Xunit.InlineDataAttribute("{\"name\":\"Movie 3\",\"yearOfRelease\":2023,\"plot\":\"Plot 3\",\"coverImage\":\"image3.jpg\"," +
            "\"producerId\":1,\"actorIds\":\"1,2\",\"genreIds\":\"1,2\"}", "201", "{\"id\":3}", new string[0])]
        [Xunit.InlineDataAttribute("{\"name\":\"\",\"yearOfRelease\":2023,\"plot\":\"Plot 3\",\"coverImage\":\"image3.jpg\",\"produc" +
            "erId\":1,\"actorIds\":\"1,2\",\"genreIds\":\"1,2\"}", "400", "{\"message\":\"Movie name is required.\"}", new string[0])]
        [Xunit.InlineDataAttribute("{\"name\":\"Movie 3\",\"yearOfRelease\":1555,\"plot\":\"Plot 3\",\"coverImage\":\"image3.jpg\"," +
            "\"producerId\":1,\"actorIds\":\"1,2\",\"genreIds\":\"1,2\"}", "400", "{\"message\":\"Year of release is invalid.\"}", new string[0])]
        [Xunit.InlineDataAttribute("{\"name\":\"Movie 3\",\"yearOfRelease\":2010,\"plot\":\"\",\"coverImage\":\"image3.jpg\",\"produ" +
            "cerId\":1,\"actorIds\":\"1,2\",\"genreIds\":\"1,2\"}", "400", "{\"message\":\"Movie plot is required.\"}", new string[0])]
        [Xunit.InlineDataAttribute("{\"name\":\"Movie 3\",\"yearOfRelease\":2010,\"plot\":\"Plot 3\",\"coverImage\":\"\",\"producerI" +
            "d\":1,\"actorIds\":\"1,2\",\"genreIds\":\"1,2\"}", "400", "{\"message\":\"Cover image is required.\"}", new string[0])]
        [Xunit.InlineDataAttribute("{\"name\":\"Movie 3\",\"yearOfRelease\":2023,\"plot\":\"Plot 3\",\"coverImage\":\"image3.jpg\"," +
            "\"producerId\":999,\"actorIds\":\"1,2\",\"genreIds\":\"1,2\"}", "404", "{\"message\":\"Producer not found\"}", new string[0])]
        [Xunit.InlineDataAttribute("{\"name\":\"Movie 3\",\"yearOfRelease\":2023,\"plot\":\"Plot 3\",\"coverImage\":\"image3.jpg\"," +
            "\"producerId\":1,\"actorIds\":\"999,2\",\"genreIds\":\"1,2\"}", "404", "{\"message\":\"Actor not found\"}", new string[0])]
        [Xunit.InlineDataAttribute("{\"name\":\"Movie 3\",\"yearOfRelease\":2023,\"plot\":\"Plot 3\",\"coverImage\":\"image3.jpg\"," +
            "\"producerId\":1,\"actorIds\":\"1,2\",\"genreIds\":\"999,2\"}", "404", "{\"message\":\"Genre not found\"}", new string[0])]
        public virtual void CreateMovie(string postDataJson, string statusCode, string expectedResponse, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("postDataJson", postDataJson);
            argumentsOfScenario.Add("statusCode", statusCode);
            argumentsOfScenario.Add("expectedResponse", expectedResponse);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create Movie", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 21
    testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 22
    testRunner.When(string.Format("I am making a POST request to \'/movies\' with the following Data \'{0}\'", postDataJson), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
    testRunner.Then(string.Format("response code must be \'{0}\'", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
    testRunner.And(string.Format("response data must look like \'{0}\'", expectedResponse), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Update Movie")]
        [Xunit.TraitAttribute("FeatureTitle", "Movie Resource")]
        [Xunit.TraitAttribute("Description", "Update Movie")]
        [Xunit.InlineDataAttribute("1", "{\"name\":\"Updated Movie\",\"yearOfRelease\":2023,\"plot\":\"Updated Plot\",\"coverImage\":\"" +
            "updatedimage.jpg\",\"producerId\":1,\"actorIds\":\"1,2\",\"genreIds\":\"1,2\"}", "200", "", new string[0])]
        [Xunit.InlineDataAttribute("999", "{\"name\":\"Updated Movie\",\"yearOfRelease\":2023,\"plot\":\"Updated Plot\",\"coverImage\":\"" +
            "updatedimage.jpg\",\"producerId\":1,\"actorIds\":\"1,2\",\"genreIds\":\"1,2\"}", "404", "{\"message\":\"Movie not found\"}", new string[0])]
        [Xunit.InlineDataAttribute("1", "{\"name\":\"\",\"yearOfRelease\":2023,\"plot\":\"Updated Plot\",\"coverImage\":\"updatedimage." +
            "jpg\",\"producerId\":1,\"actorIds\":\"1,2\",\"genreIds\":\"1,2\"}", "400", "{\"message\":\"Movie name is required.\"}", new string[0])]
        [Xunit.InlineDataAttribute("1", "{\"name\":\"Updated Movie\",\"yearOfRelease\":2010,\"plot\":\"\",\"coverImage\":\"image3.jpg\"," +
            "\"producerId\":1,\"actorIds\":\"1,2\",\"genreIds\":\"1,2\"}", "400", "{\"message\":\"Movie plot is required.\"}", new string[0])]
        [Xunit.InlineDataAttribute("1", "{\"name\":\"Updated Movie\",\"yearOfRelease\":1555,\"plot\":\"Updated Plot\",\"coverImage\":\"" +
            "image3.jpg\",\"producerId\":1,\"actorIds\":\"1,2\",\"genreIds\":\"1,2\"}", "400", "{\"message\":\"Year of release is invalid.\"}", new string[0])]
        [Xunit.InlineDataAttribute("1", "{\"name\":\"Updated Movie\",\"yearOfRelease\":2010,\"plot\":\"Updated Plot\",\"coverImage\":\"" +
            "\",\"producerId\":1,\"actorIds\":\"1,2\",\"genreIds\":\"1,2\"}", "400", "{\"message\":\"Cover image is required.\"}", new string[0])]
        [Xunit.InlineDataAttribute("1", "{\"name\":\"Updated Movie\",\"yearOfRelease\":2023,\"plot\":\"Updated Plot\",\"coverImage\":\"" +
            "image3.jpg\",\"producerId\":999,\"actorIds\":\"1,2\",\"genreIds\":\"1,2\"}", "404", "{\"message\":\"Producer not found\"}", new string[0])]
        [Xunit.InlineDataAttribute("1", "{\"name\":\"Updated Movie\",\"yearOfRelease\":2023,\"plot\":\"Updated Plot\",\"coverImage\":\"" +
            "image3.jpg\",\"producerId\":1,\"actorIds\":\"999,2\",\"genreIds\":\"1,2\"}", "404", "{\"message\":\"Actor not found\"}", new string[0])]
        [Xunit.InlineDataAttribute("1", "{\"name\":\"Updated Movie\",\"yearOfRelease\":2023,\"plot\":\"Updated Plot\",\"coverImage\":\"" +
            "image3.jpg\",\"producerId\":1,\"actorIds\":\"1,2\",\"genreIds\":\"999,2\"}", "404", "{\"message\":\"Genre not found\"}", new string[0])]
        public virtual void UpdateMovie(string movieId, string postDataJson, string statusCode, string expectedResponse, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("movieId", movieId);
            argumentsOfScenario.Add("postDataJson", postDataJson);
            argumentsOfScenario.Add("statusCode", statusCode);
            argumentsOfScenario.Add("expectedResponse", expectedResponse);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Movie", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 38
    testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 39
    testRunner.When(string.Format("I make PUT Request \'/movies/{0}\' with the following Data \'{1}\'", movieId, postDataJson), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 40
    testRunner.Then(string.Format("response code must be \'{0}\'", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
    testRunner.And(string.Format("response data must look like \'{0}\'", expectedResponse), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Delete Movie")]
        [Xunit.TraitAttribute("FeatureTitle", "Movie Resource")]
        [Xunit.TraitAttribute("Description", "Delete Movie")]
        [Xunit.InlineDataAttribute("1", "200", "{\"message\":\"Movie with Id 1 deleted\"}", new string[0])]
        [Xunit.InlineDataAttribute("999", "404", "{\"message\":\"Movie not found\"}", new string[0])]
        public virtual void DeleteMovie(string movieId, string statusCode, string expectedResponse, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("movieId", movieId);
            argumentsOfScenario.Add("statusCode", statusCode);
            argumentsOfScenario.Add("expectedResponse", expectedResponse);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete Movie", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 55
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 56
    testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 57
    testRunner.When(string.Format("I make DELETE Request \'/movies/{0}\'", movieId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 58
    testRunner.Then(string.Format("response code must be \'{0}\'", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 59
    testRunner.And(string.Format("response data must look like \'{0}\'", expectedResponse), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.8.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                MovieResourceFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                MovieResourceFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
